---
# tasks file for bacula-client
  - name: Installs packages from bacula-client (Bacula File Daemon)
    action: apt name=bacula-client state=present update_cache=yes
    tags: apt
    
  - stat:
      path: /etc/bacula/passwords
    register: pwd_file
    tags: password,config

  - name: Creates password's file
    file: path=/etc/bacula/passwords state=touch group=root owner=root
    when: pwd_file.stat.exists == false
    tags: password

  - name: Generates a random password
    shell: "head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo ''"
    register: unique_password
    when: pwd_file.stat.exists == false
    tags: password,config

  - name: Writes the generated password in /etc/bacula/passwords
    shell: "echo {{unique_password.stdout}} >> /etc/bacula/passwords"
    when: pwd_file.stat.exists == false
    tags: config

  - name: Reads /etc/bacula/passwords content
    shell: "cat /etc/bacula/passwords"
    register: unique_password
    tags: config

  - name: Sends bacula-fd.conf template
    template: src=bacula-fd.conf.j2 dest=/etc/bacula/bacula-fd.conf
    tags: config
    notify: restart_bacula_fd

  - name: Sends client.conf template to Director's machine.
    template: src="{{item.src}}" dest="{{item.dest}}"
    loop:
      - {src: pools.conf.j2, dest: "{{docker_data}}/pools/{{ansible_hostname}}_pool.conf" } 
      - {src: job_defs.conf.j2, dest: "{{docker_data}}/job_defs/{{ansible_hostname}}_job.conf" } 
      - {src: client.conf.j2, dest: "{{docker_data}}/clients/{{ansible_hostname}}.conf" }       
    delegate_to: "{{director_address}}"
    tags: config
    notify: reload_bacula_dir